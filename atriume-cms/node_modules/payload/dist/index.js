"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payload = void 0;
const express_1 = __importDefault(require("express"));
const crypto_1 = __importDefault(require("crypto"));
const logger_1 = __importDefault(require("./utilities/logger"));
const load_1 = __importDefault(require("./config/load"));
const authenticate_1 = __importDefault(require("./express/middleware/authenticate"));
const connect_1 = __importDefault(require("./mongoose/connect"));
const middleware_1 = __importDefault(require("./express/middleware"));
const admin_1 = __importDefault(require("./express/admin"));
const init_1 = __importDefault(require("./auth/init"));
const access_1 = __importDefault(require("./auth/requestHandlers/access"));
const init_2 = __importDefault(require("./collections/init"));
const init_3 = __importDefault(require("./preferences/init"));
const init_4 = __importDefault(require("./globals/init"));
const initPlayground_1 = __importDefault(require("./graphql/initPlayground"));
const static_1 = __importDefault(require("./express/static"));
const registerSchema_1 = __importDefault(require("./graphql/registerSchema"));
const graphQLHandler_1 = __importDefault(require("./graphql/graphQLHandler"));
const build_1 = __importDefault(require("./email/build"));
const identifyAPI_1 = __importDefault(require("./express/middleware/identifyAPI"));
const errorHandler_1 = __importDefault(require("./express/middleware/errorHandler"));
const local_1 = __importDefault(require("./collections/operations/local"));
const local_2 = __importDefault(require("./globals/operations/local"));
const crypto_2 = require("./auth/crypto");
const sendEmail_1 = __importDefault(require("./email/sendEmail"));
const serverInit_1 = require("./utilities/telemetry/events/serverInit");
require('isomorphic-fetch');
/**
 * @description Payload
 */
class Payload {
    constructor() {
        this.collections = {};
        this.versions = {};
        this.encrypt = crypto_2.encrypt;
        this.decrypt = crypto_2.decrypt;
        this.Query = { name: 'Query', fields: {} };
        this.Mutation = { name: 'Mutation', fields: {} };
        this.errorResponses = [];
        this.getAdminURL = () => `${this.config.serverURL}${this.config.routes.admin}`;
        this.getAPIURL = () => `${this.config.serverURL}${this.config.routes.api}`;
        /**
         * @description Performs create operation
         * @param options
         * @returns created document
         */
        this.create = async (options) => {
            const { create } = local_1.default;
            return create(this, options);
        };
        /**
         * @description Find documents with criteria
         * @param options
         * @returns documents satisfying query
         */
        this.find = async (options) => {
            const { find } = local_1.default;
            return find(this, options);
        };
        this.findGlobal = async (options) => {
            const { findOne } = local_2.default;
            return findOne(this, options);
        };
        this.updateGlobal = async (options) => {
            const { update } = local_2.default;
            return update(this, options);
        };
        /**
         * @description Find global versions with criteria
         * @param options
         * @returns versions satisfying query
         */
        this.findGlobalVersions = async (options) => {
            const { findVersions } = local_2.default;
            return findVersions(this, options);
        };
        /**
         * @description Find global version by ID
         * @param options
         * @returns global version with specified ID
         */
        this.findGlobalVersionByID = async (options) => {
            const { findVersionByID } = local_2.default;
            return findVersionByID(this, options);
        };
        /**
         * @description Restore global version by ID
         * @param options
         * @returns version with specified ID
         */
        this.restoreGlobalVersion = async (options) => {
            const { restoreVersion } = local_2.default;
            return restoreVersion(this, options);
        };
        /**
         * @description Find document by ID
         * @param options
         * @returns document with specified ID
         */
        this.findByID = async (options) => {
            const { findByID } = local_1.default;
            return findByID(this, options);
        };
        /**
         * @description Update document
         * @param options
         * @returns Updated document
         */
        this.update = async (options) => {
            const { update } = local_1.default;
            return update(this, options);
        };
        this.delete = async (options) => {
            const { localDelete } = local_1.default;
            return localDelete(this, options);
        };
        /**
         * @description Find versions with criteria
         * @param options
         * @returns versions satisfying query
         */
        this.findVersions = async (options) => {
            const { findVersions } = local_1.default;
            return findVersions(this, options);
        };
        /**
         * @description Find version by ID
         * @param options
         * @returns version with specified ID
         */
        this.findVersionByID = async (options) => {
            const { findVersionByID } = local_1.default;
            return findVersionByID(this, options);
        };
        /**
         * @description Restore version by ID
         * @param options
         * @returns version with specified ID
         */
        this.restoreVersion = async (options) => {
            const { restoreVersion } = local_1.default;
            return restoreVersion(this, options);
        };
        this.login = async (options) => {
            const { login } = local_1.default.auth;
            return login(this, options);
        };
        this.forgotPassword = async (options) => {
            const { forgotPassword } = local_1.default.auth;
            return forgotPassword(this, options);
        };
        this.resetPassword = async (options) => {
            const { resetPassword } = local_1.default.auth;
            return resetPassword(this, options);
        };
        this.unlock = async (options) => {
            const { unlock } = local_1.default.auth;
            return unlock(this, options);
        };
        this.verifyEmail = async (options) => {
            const { verifyEmail } = local_1.default.auth;
            return verifyEmail(this, options);
        };
    }
    /**
     * @description Initializes Payload
     * @param options
     */
    init(options) {
        this.logger = (0, logger_1.default)('payload', options.loggerOptions);
        this.logger.info('Starting Payload...');
        if (!options.secret) {
            throw new Error('Error: missing secret key. A secret key is needed to secure Payload.');
        }
        if (options.mongoURL !== false && typeof options.mongoURL !== 'string') {
            throw new Error('Error: missing MongoDB connection URL.');
        }
        this.emailOptions = { ...(options.email) };
        this.secret = crypto_1.default
            .createHash('sha256')
            .update(options.secret)
            .digest('hex')
            .slice(0, 32);
        this.mongoURL = options.mongoURL;
        this.local = options.local;
        this.config = (0, load_1.default)(this.logger);
        // If not initializing locally, scaffold router
        if (!this.local) {
            this.router = express_1.default.Router();
            this.router.use(...(0, middleware_1.default)(this));
            (0, init_1.default)(this);
        }
        // Configure email service
        this.email = (0, build_1.default)(this.emailOptions, this.logger);
        this.sendEmail = sendEmail_1.default.bind(this);
        // Initialize collections & globals
        (0, init_2.default)(this);
        (0, init_4.default)(this);
        // Connect to database
        if (this.mongoURL) {
            (0, connect_1.default)(this.mongoURL, options.mongoOptions, options.local, this.logger);
        }
        if (!this.config.graphQL.disable) {
            (0, registerSchema_1.default)(this);
        }
        // If not initializing locally, set up HTTP routing
        if (!this.local) {
            options.express.use((req, res, next) => {
                req.payload = this;
                next();
            });
            this.express = options.express;
            if (this.config.rateLimit.trustProxy) {
                this.express.set('trust proxy', 1);
            }
            (0, admin_1.default)(this);
            (0, init_3.default)(this);
            this.router.get('/access', access_1.default);
            if (!this.config.graphQL.disable) {
                this.router.use(this.config.routes.graphQL, (0, identifyAPI_1.default)('GraphQL'), (req, res) => (0, graphQLHandler_1.default)(req, res)(req, res));
                (0, initPlayground_1.default)(this);
            }
            // Bind router to API
            this.express.use(this.config.routes.api, this.router);
            // Enable static routes for all collections permitting upload
            (0, static_1.default)(this);
            this.errorHandler = (0, errorHandler_1.default)(this.config, this.logger);
            this.router.use(this.errorHandler);
            this.authenticate = (0, authenticate_1.default)(this.config);
        }
        if (typeof options.onInit === 'function')
            options.onInit(this);
        (0, serverInit_1.serverInit)(this);
    }
}
exports.Payload = Payload;
const payload = new Payload();
exports.default = payload;
module.exports = payload;
//# sourceMappingURL=data:application/json;base64,