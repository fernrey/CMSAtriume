"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_transition_group_1 = require("react-transition-group");
var useCollapsible_1 = __importDefault(require("../useCollapsible"));
var CollapsibleToggler = function (props) {
    var className = props.className, _a = props.htmlElement, Tag = _a === void 0 ? 'button' : _a, disable = props.disable, children = props.children, onClick = props.onClick, typeFromProps = props.type, rest = __rest(props, ["className", "htmlElement", "disable", "children", "onClick", "type"]);
    var _b = (0, useCollapsible_1.default)(), rootClass = _b.rootClass, handleClick = _b.handleClick, isOpen = _b.isOpen, transTime = _b.transTime;
    var baseClass = "".concat(rootClass, "__toggler");
    var mergedClasses = [
        baseClass,
        isOpen && "".concat(baseClass, "--is-open"),
        disable && "".concat(baseClass, "--is-disabled"),
        className,
    ].filter(Boolean).join(' ');
    var typeToUse = typeFromProps;
    if (!typeFromProps && Tag === 'button')
        typeToUse = 'button';
    var mergedAttributes = __assign(__assign({ type: typeToUse }, rest), { onClick: function (e) {
            if (!disable)
                handleClick();
            if (typeof onClick === 'function')
                onClick(e);
        } });
    return (react_1.default.createElement(react_transition_group_1.CSSTransition, { timeout: transTime, in: isOpen, classNames: {
            appear: "".concat(baseClass, "--appear"),
            appearActive: "".concat(baseClass, "--appearActive"),
            appearDone: "".concat(baseClass, "--appearDone"),
            enter: "".concat(baseClass, "--enter"),
            enterActive: "".concat(baseClass, "--enterActive"),
            enterDone: "".concat(baseClass, "--enterDone"),
            exit: "".concat(baseClass, "--exit"),
            exitActive: "".concat(baseClass, "--exitActive"),
            exitDone: "".concat(baseClass, "--exitDone"),
        } },
        react_1.default.createElement(Tag, __assign({}, mergedAttributes, { className: mergedClasses }), children && children)));
};
exports.default = CollapsibleToggler;
//# sourceMappingURL=index.js.map